# Generated by Django 4.2.2 on 2023-06-16 20:37

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Dubladore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dublador', models.CharField(max_length=100)),
                ('nome_artistico', models.CharField(max_length=40)),
                ('nascimento', models.DateField(verbose_name='Data de Nascimento')),
                ('categoria', models.CharField(choices=[('ADULTA_MASCULINA_PESADA', 'Adulta Masculina Pesada'), ('ADULTA_FEMININA_PESADA', 'Adulta Feminina Pesada'), ('INFANTIL_FEMININA', 'Infantil Feminina'), ('ADULTA_MASCULINA_LEVE', 'Adulta Masculina Leve'), ('IDOSA_FEMININA_PESADA', 'Idosa Feminina Pesada'), ('ADOLESCENTE_MASCULINA', 'Adolescente Masculina'), ('IDOSA_MASCULINA', 'Idosa Masculina'), ('IDOSA_FEMININA', 'Idosa Feminina'), ('JOVEM_FEMININA_LEVE', 'Jovem Feminina Leve'), ('JOVEM_FEMININA', 'Jovem Feminina'), ('ADULTA_FEMININA_LEVE', 'Adulta Feminina Leve'), ('ADOLESCENTE_FEMININA', 'Adolescente Feminina'), ('ADULTA_MASCULINA', 'Adulta Masculina'), ('JOVEM_MASCULINA_LEVE', 'Jovem Masculina Leve'), ('INFANTIL_MASCULINA', 'Infantil Masculina'), ('IDOSA_MASCULINA_LEVE', 'Idosa Masculina Leve'), ('MEIA_IDADE_MASCULINA', 'Meia Idade Masculina'), ('JOVEM_MASCULINA', 'Jovem Masculina'), ('MEIA_IDADE_FEMININA', 'Meia Idade Feminina'), ('JOVEM_MASCULINA_PESADA', 'Jovem Masculina Pesada'), ('IDOSA_MASCULINA_PESADA', 'Idosa Masculina Pesada'), ('IDOSA_FEMININA_LEVE', 'Idosa Feminina Leve'), ('ADULTA_FEMININA', 'Adulta Feminina'), ('JOVEM_FEMININA_PESADA', 'Jovem Feminina Pesada')], max_length=2500)),
                ('etnia', models.CharField(choices=[('AMARELA', 'Amarela'), ('BRANCA', 'Branca'), ('INDIGENA', 'Indigena'), ('PARDA', 'Parda'), ('PRETA', 'Preta')], max_length=1000)),
                ('genero', models.CharField(choices=[('HOMEM_CIS', 'Homem Cis'), ('HOMEM_TRANS', 'Homem Trans'), ('INTERSEXO', 'intersexo'), ('MULHER_CIS', 'Mulher Cis'), ('MULHER_TRANS', ' Mulher Trans'), ('NAOBINARIO', 'Não Binário')], max_length=1000)),
                ('orientacao', models.CharField(choices=[('ASSEXUAL', 'Assexual'), ('BISSEXUAL', 'Bissexual'), ('HETEROSSEXUAL', 'Heterossexual'), ('HOMOSSEXUAL', 'Homossexual'), ('PANSEXUAL', 'Pansexual')], max_length=1000)),
                ('idiomas', models.CharField(max_length=40)),
                ('pcd', models.CharField(choices=[('S', 'Sim'), ('N', 'Nâo')], default='N', max_length=1)),
                ('canta', models.CharField(choices=[('S', 'Sim'), ('N', 'Nâo')], default='N', max_length=1)),
                ('extensao_vocal', models.TextField(max_length=1000)),
                ('foto', models.ImageField(upload_to='foto_dublador')),
                ('audio', models.FileField(upload_to='music/')),
            ],
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('dubladores_vistos', models.ManyToManyField(to='vox.dubladore')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
